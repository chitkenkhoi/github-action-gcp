# .github/workflows/provision-infra.yml

name: "Terraform: Provision Google Cloud Infrastructure"

on:
  push:
    branches:
      - 'main'
    paths:
      - 'terraform/**' # Trigger on changes to terraform files
  workflow_dispatch:

env:
  PROJECT_ID: 'arboreal-retina-466009-h1'
  REGION: 'us-central1'
  GAR_REPOSITORY: 'accenture-lab'
  SERVICE_NAME: 'hello-cloud-run-quangkhoi'
  SERVICE_ACCOUNT_NAME: 'github-actions-sa'
  TF_WORKING_DIR: 'terraform' # Set the working directory for Terraform

# jobs:
#   provision:
#     name: Create Load Balancer and related resources
#     runs-on: ubuntu-latest
#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#     - name: Checkout repository
#       uses: 'actions/checkout@v4'

#     - id: 'auth'
#       uses: 'google-github-actions/auth@v2'
#       with:
#         project_id: '${{ env.PROJECT_ID }}'
#         workload_identity_provider: 'projects/768212343059/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
#         service_account: '${{ env.SERVICE_ACCOUNT_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com' # Optional: Use a specific service account

#     - name: Set up gcloud CLI
#       uses: 'google-github-actions/setup-gcloud@v1'
    
#     - name: '[Step 0] Create Artifact Registry Repository'
#       run: |
#         echo "Creating Artifact Registry repository '${{ env.GAR_REPOSITORY_NAME }}' in region '${{ env.REGION }}'..."
#         gcloud artifacts repositories create ${{ env.GAR_REPOSITORY_NAME }} \
#           --repository-format=docker \
#           --location=${{ env.REGION }} \
#           --description="Docker repository for application images" \
#           --project=${{ env.PROJECT_ID }} \
#           || echo "Artifact Registry repository already exists."

#     - name: '[Step 1] Create Serverless NEG for Cloud Run'
#       run: |
#         echo "Creating NEG '${{ env.NEG_NAME }}'..."
#         gcloud compute network-endpoint-groups create ${{ env.NEG_NAME }} \
#           --region=${{ env.REGION }} \
#           --network-endpoint-type=serverless \
#           --cloud-run-service=${{ env.SERVICE_NAME }} \
#           --project=${{ env.PROJECT_ID }} || echo "NEG already exists."

#     - name: '[Step 2] Create a global Backend Service'
#       run: |
#         echo "Creating Backend Service '${{ env.BACKEND_SERVICE_NAME }}'..."
#         gcloud compute backend-services create ${{ env.BACKEND_SERVICE_NAME }} \
#           --global \
#           --project=${{ env.PROJECT_ID }} || echo "Backend service already exists."

#     - name: '[Step 3] Add NEG to the Backend Service'
#       run: |
#         echo "Attaching NEG to Backend Service..."
#         gcloud compute backend-services add-backend ${{ env.BACKEND_SERVICE_NAME }} \
#           --global \
#           --network-endpoint-group=${{ env.NEG_NAME }} \
#           --network-endpoint-group-region=${{ env.REGION }} \
#           --project=${{ env.PROJECT_ID }} || echo "Backend already attached."

#     - name: '[Step 4] Create a URL Map'
#       run: |
#         echo "Creating URL Map '${{ env.URL_MAP_NAME }}'..."
#         gcloud compute url-maps create ${{ env.URL_MAP_NAME }} \
#           --default-service=${{ env.BACKEND_SERVICE_NAME }} \
#           --project=${{ env.PROJECT_ID }} || echo "URL Map already exists."

#     - name: '[Step 5] Reserve a global static IP address'
#       run: |
#         echo "Creating Static IP '${{ env.IP_NAME }}'..."
#         gcloud compute addresses create ${{ env.IP_NAME }} \
#           --global \
#           --project=${{ env.PROJECT_ID }} || echo "IP Address already exists."
        
#     # - name: '[Step 6] Create a Google-managed SSL certificate'
#     #   run: |
#     #     echo "Creating SSL Certificate '${{ env.SSL_CERT_NAME }}' for domain '${{ env.YOUR_DOMAIN }}'..."
#     #     gcloud compute ssl-certificates create ${{ env.SSL_CERT_NAME }} \
#     #       --domains=${{ env.YOUR_DOMAIN }} \
#     #       --global \
#     #       --project=${{ env.PROJECT_ID }} || echo "SSL Certificate already exists."
#     #     echo "SSL Certificate is being provisioned. This can take up to 60 minutes."
#     - name: '[Step 6] Create a Target HTTP Proxy'
#       run: |
#         echo "Creating HTTP Proxy '${{ env.PROXY_NAME }}'..."
#         gcloud compute target-http-proxies create ${{ env.PROXY_NAME }} \
#           --url-map=${{ env.URL_MAP_NAME }} \
#           --project=${{ env.PROJECT_ID }} || echo "Target HTTP Proxy already exists."
        
#     # - name: '[Step 7] Create a Target HTTPS Proxy'
#     #   run: |
#     #     echo "Creating HTTPS Proxy '${{ env.PROXY_NAME }}'..."
#     #     gcloud compute target-https-proxies create ${{ env.PROXY_NAME }} \
#     #       --ssl-certificates=${{ env.SSL_CERT_NAME }} \
#     #       --url-map=${{ env.URL_MAP_NAME }} \
#     #       --global \
#     #       --project=${{ env.PROJECT_ID }} || echo "Target Proxy already exists."

#     # - name: '[Step 8] Create the Global Forwarding Rule (Load Balancer)'
#     #   run: |
#     #     echo "Creating Forwarding Rule '${{ env.LB_NAME }}'..."
#     #     IP_ADDRESS=$(gcloud compute addresses describe ${{ env.IP_NAME }} --global --project=${{ env.PROJECT_ID }} --format="value(address)")
#     #     gcloud compute forwarding-rules create ${{ env.LB_NAME }} \
#     #       --address=$IP_ADDRESS \
#     #       --target-https-proxy=${{ env.PROXY_NAME }} \
#     #       --global \
#     #       --ports=443 \
#     #       --project=${{ env.PROJECT_ID }} || echo "Forwarding Rule already exists."

#     # - name: 'IMPORTANT: Final Instructions'
#     #   run: |
#     #     IP_ADDRESS=$(gcloud compute addresses describe ${{ env.IP_NAME }} --global --project=${{ env.PROJECT_ID }} --format="value(address)")
#     #     echo "✅✅✅ INFRASTRUCTURE PROVISIONING COMPLETE ✅✅✅"
#     #     echo "====================================================================================="
#     #     echo "ACTION REQUIRED: Please update your DNS settings for the domain '${{ env.YOUR_DOMAIN }}'."
#     #     echo "Create an 'A' record pointing to the following static IP address:"
#     #     echo "IP ADDRESS: $IP_ADDRESS"
#     #     echo "====================================================================================="
#     #     echo "NOTE: The SSL certificate may take up to 60 minutes to be provisioned by Google."
#     #     echo "You can check its status with: gcloud compute ssl-certificates describe ${{ env.SSL_CERT_NAME }} --global"
#     - name: '[Step 7] Create the Global Forwarding Rule (HTTP Load Balancer)'
#       run: |
#         echo "Creating Forwarding Rule '${{ env.LB_NAME }}' for HTTP traffic..."
#         IP_ADDRESS=$(gcloud compute addresses describe ${{ env.IP_NAME }} --global --project=${{ env.PROJECT_ID }} --format="value(address)")
#         gcloud compute forwarding-rules create ${{ env.LB_NAME }} \
#           --address=$IP_ADDRESS \
#           --target-http-proxy=${{ env.PROXY_NAME }} \
#           --global \
#           --ports=80 \
#           --project=${{ env.PROJECT_ID }} || echo "Forwarding Rule already exists."

#     # <<< THAY ĐỔI: Hướng dẫn cuối cùng chỉ hiển thị IP
#     - name: 'IMPORTANT: Final Instructions'
#       run: |
#         IP_ADDRESS=$(gcloud compute addresses describe ${{ env.IP_NAME }} --global --project=${{ env.PROJECT_ID }} --format="value(address)")
#         echo "✅✅✅ INFRASTRUCTURE PROVISIONING COMPLETE ✅✅✅"
#         echo "====================================================================================="
#         echo "ACTION REQUIRED: You can now access your application using the following IP address."
#         echo "Make sure to use the HTTP protocol (not HTTPS)."
#         echo ""
#         echo "URL: http://$IP_ADDRESS"
#         echo ""
#         echo "NOTE: Your browser will show a 'Not Secure' warning. This is expected."
#         echo "====================================================================================="
jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: '${{ env.PROJECT_ID }}'
        workload_identity_provider: 'projects/768212343059/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: '${{ env.SERVICE_ACCOUNT_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v2

    - name: 'Terraform Init'
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} init

    - name: 'Terraform Validate'
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

    - name: 'Terraform Plan'
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="gar_repository_name=${{ env.GAR_REPOSITORY }}"

    - name: 'Terraform Apply'
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -input=false \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="gar_repository_name=${{ env.GAR_REPOSITORY }}"